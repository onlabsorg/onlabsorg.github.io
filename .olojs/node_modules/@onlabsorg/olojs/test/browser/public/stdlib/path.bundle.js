(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/stdlib/path"],{

/***/ "../../node_modules/@onlabsorg/swan-js/lib/stdlib/path.js":
/*!****************************************************************************************!*\
  !*** /home/marcello/mdb/Code/olojs/node_modules/@onlabsorg/swan-js/lib/stdlib/path.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n *  path - swan stdlib module\n *  ============================================================================\n *  This module contains functions to manipulate file path strings.\n */\n\nconst pathlib = __webpack_require__(/*! path */ \"../../node_modules/path-browserify/index.js\");\n\nmodule.exports = {\n\n    /**\n     *  path.dir - function\n     *  ------------------------------------------------------------------------\n     *  Given a path `p`, it returns the path without the terminal segment.\n     *  ```\n     *  dirPath = path.dir(p)\n     *  ```\n     */\n    dir (path) {\n        return pathlib.dirname(path);\n    },\n\n\n    /**\n     *  path.fullName - function\n     *  ------------------------------------------------------------------------\n     *  Given a path `p`, it returns the terminal segment.\n     *  ```\n     *  name = path.fullName(p)\n     *  ```\n     */\n    fullName (path) {\n        return pathlib.basename(path);\n    },\n\n\n    /**\n     *  path.name - function\n     *  ------------------------------------------------------------------------\n     *  Given a path `p`, it returns the terminal segment, without extension.\n     *  ```\n     *  pathName = path.name(p)\n     *  ```\n     */\n    name (path) {\n        const fullName = this.fullName(path);\n        const ext = this.ext(path);\n        return fullName.slice(0, ext.length+1);\n    },\n\n\n    /**\n     *  path.ext - function\n     *  ------------------------------------------------------------------------\n     *  Given a path `p`, it returns the extension of the terminal segment.\n     *  ```\n     *  pathExt = path.ext(p)\n     *  ```\n     */\n    ext (path) {\n        return pathlib.extname(path);\n    },\n\n\n    /**\n     *  path.normalize - function\n     *  ------------------------------------------------------------------------\n     *  Given a path `p`, it returns an equivalent path, after resolving `.`,\n     *  `..` and multiple `/`.\n     *  ```\n     *  nPath = path.normalize(p)\n     *  ```\n     */\n    normalize (path) {\n        return pathlib.normalize(path);\n    },\n\n\n    /**\n     *  path.join - function\n     *  ------------------------------------------------------------------------\n     *  Given a tuple of paths, it returns a signle path obtained by\n     *  concatenating them.\n     *  ```\n     *  jPath = path.join(p1, p2, p3, ...)\n     *  ```\n     */\n    join (...paths) {\n        return pathlib.join(...paths);\n    },\n\n\n    /**\n     *  path.resolve - function\n     *  ------------------------------------------------------------------------\n     *  Given a tuple of paths, it resolves a sequence of paths or path segments\n     *  into an absolute path.\n     *  ```\n     *  absPath = path.resolve(p1, p2, p3, ...)\n     *  ```\n     */\n    resolve (...paths) {\n        return pathlib.resolve(\"/\", ...paths);\n    }\n};\n\n\n//# sourceURL=webpack:////home/marcello/mdb/Code/olojs/node_modules/@onlabsorg/swan-js/lib/stdlib/path.js?");

/***/ })

}]);